/**
 * PR Comment Script with GitHub Pages Hosted Images
 * Posts PR analysis with properly hosted image URLs
 */

const fs = require('fs');
const path = require('path');

module.exports = async ({ github, context }) => {
  try {
    console.log('Starting GitHub Pages visual PR comment...');
    
    // Load visual URLs from the generated file
    let visualUrls = {};
    const urlsPath = path.join('.code-analysis/outputs/visual_urls.json');
    
    if (fs.existsSync(urlsPath)) {
      const urlsContent = fs.readFileSync(urlsPath, 'utf8');
      visualUrls = JSON.parse(urlsContent);
      console.log('Loaded visual URLs:', visualUrls);
    } else {
      console.log('No visual URLs found, using fallback');
      // Fallback URLs construction
      const owner = context.repo.owner;
      const repo = context.repo.repo;
      const prNumber = context.issue.number;
      const baseUrl = `https://${owner}.github.io/${repo}`;
      
      visualUrls = {
        base_url: baseUrl,
        pr_number: prNumber,
        urls: {
          pr_heatmap: `${baseUrl}/pr/${prNumber}/pr_impact_heatmap.png`,
          development_flow: `${baseUrl}/pr/${prNumber}/development_flow.png`,
          story_arc: `${baseUrl}/pr/${prNumber}/story_arc.png`,
          dependency_base: `${baseUrl}/pr/${prNumber}/dependency_graph_base.png`,
          dependency_pr: `${baseUrl}/pr/${prNumber}/dependency_graph_pr.png`,
          index: `${baseUrl}/pr/${prNumber}/index.html`
        }
      };
    }

    // Read analysis results
    let analysisContent = '';
    const analysisPath = path.join('.code-analysis/outputs/comprehensive_pr_report.md');
    
    if (fs.existsSync(analysisPath)) {
      analysisContent = fs.readFileSync(analysisPath, 'utf8');
    }

    // Create the comment body with hosted images
    const commentBody = `## 📊 PR Visual Analysis

### 🔗 [View All Visuals on GitHub Pages](${visualUrls.urls.index})

### 🗺️ PR Impact Heatmap
Shows the areas of the codebase most affected by this PR.

![PR Impact Heatmap](${visualUrls.urls.pr_heatmap})

### 🔄 Development Flow
Visualizes the development progression and change patterns.

![Development Flow](${visualUrls.urls.development_flow})

### 📈 Story Arc Analysis
Shows the evolution and complexity changes over time.

![Story Arc](${visualUrls.urls.story_arc})

### 🕸️ Dependency Analysis

**Base Branch Dependencies:**
![Base Dependencies](${visualUrls.urls.dependency_base})

**PR Branch Dependencies:**
![PR Dependencies](${visualUrls.urls.dependency_pr})

---

### 📋 Analysis Summary

${analysisContent ? analysisContent.substring(0, 3000) + (analysisContent.length > 3000 ? '...\n\n[View full analysis on GitHub Pages](' + visualUrls.urls.index + ')' : '') : 'Analysis in progress...'}

---

*📍 All visuals are hosted on GitHub Pages and will remain accessible for reference.*
*🔗 [Direct link to this PR's visual dashboard](${visualUrls.urls.index})*

---
*Generated by PR Companion 🤖*`;

    // Find existing comment
    const comments = await github.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.issue.number,
    });

    const existingComment = comments.data.find(comment => 
      comment.body.includes('📊 PR Visual Analysis') || 
      comment.body.includes('Generated by PR Companion 🤖')
    );

    if (existingComment) {
      // Update existing comment
      console.log('Updating existing visual analysis comment...');
      await github.rest.issues.updateComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        comment_id: existingComment.id,
        body: commentBody
      });
      console.log('Updated comment with ID:', existingComment.id);
    } else {
      // Create new comment
      console.log('Creating new visual analysis comment...');
      const comment = await github.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
        body: commentBody
      });
      console.log('Created new comment with ID:', comment.data.id);
    }

    // Also create a summary comment with just the key visuals
    const summaryBody = `## 🎯 Quick Visual Summary

![PR Heatmap](${visualUrls.urls.pr_heatmap}) ![Development Flow](${visualUrls.urls.development_flow})

[📊 View Detailed Analysis](${visualUrls.urls.index}) | [📈 Story Arc](${visualUrls.urls.story_arc})`;

    const summaryComment = comments.data.find(comment => 
      comment.body.includes('🎯 Quick Visual Summary')
    );

    if (!summaryComment) {
      await github.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
        body: summaryBody
      });
      console.log('Created summary comment');
    }

    return {
      success: true,
      message: 'PR visual comment posted successfully with GitHub Pages hosted images',
      urls: visualUrls.urls
    };

  } catch (error) {
    console.error('Error in GitHub Pages visual PR comment:', error);
    
    // Create a fallback comment
    const fallbackBody = `## 📊 PR Visual Analysis

⚠️ **Visual generation in progress...**

The visual analysis is being generated and will be available shortly. This comment will be updated with the results.

---
*Generated by PR Companion 🤖*`;

    try {
      await github.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
        body: fallbackBody
      });
    } catch (fallbackError) {
      console.error('Failed to create fallback comment:', fallbackError);
    }

    throw error;
  }
};
