/**
 * PR Comment Script with GitHub Pages Hosted Images
 * Posts PR analysis with hosted image URLs
 */

const fs = require('fs');
const path = require('path');

module.exports = async ({ github, context }) => {
  try {
    console.log('Starting GitHub Pages visual PR comment...');
    
    // Load visual URLs from the generated file
    let visualUrls = {};
    const urlsPath = path.join('.code-analysis/outputs/visual_urls.json');
    
    if (fs.existsSync(urlsPath)) {
      const urlsContent = fs.readFileSync(urlsPath, 'utf8');
      visualUrls = JSON.parse(urlsContent);
      console.log('Loaded visual URLs:', visualUrls);
    } else {
      console.log('No visual URLs found, using fallback');
      // Fallback URLs construction
      const owner = context.repo.owner;
      const repo = context.repo.repo;
      const prNumber = context.issue.number;
      const baseUrl = `https://${owner}.github.io/${repo}`;
      
      visualUrls = {
        base_url: baseUrl,
        pr_number: prNumber,
        urls: {
          development_flow: `${baseUrl}/pr/${prNumber}/development_flow.png`,
          story_arc: `${baseUrl}/pr/${prNumber}/story_arc.png`,
          dependency_pr: `${baseUrl}/pr/${prNumber}/dependency_graph_pr.png`,
          index: `${baseUrl}/pr/${prNumber}/index.html`
        }
      };
    }

    // Create the comment body with hosted images and enhanced cache busting
    const timestamp = Date.now();
    const randomId = Math.floor(Math.random() * 10000);
    const runNumber = process.env.GITHUB_RUN_NUMBER || Date.now();
    
    // Apply multiple cache busting parameters to image URL
    const imageUrlWithCacheBusting = `${visualUrls.urls.development_flow}&_cb=${timestamp}&_r=${randomId}&_run=${runNumber}`;
    
    const commentBody = `## PR Visual Analysis

### [View All Visuals on GitHub Pages](${visualUrls.urls.index})

> **Note**: If images appear broken initially, GitHub Pages may still be deploying. Please wait a few minutes and refresh.

### PR Impact Grid
Shows risk score, review time estimate, file change heatmap, and development intent.

![PR Impact Grid](${imageUrlWithCacheBusting})

---

*All visuals are hosted on GitHub Pages and will remain accessible for reference.*
*[Direct link to this PR's visual dashboard](${visualUrls.urls.index})*

---
*Generated by PR Companion Visual Analysis*
<!-- PR_VISUAL_ANALYSIS_COMMENT -->`;

    // Find existing comment - be more specific to avoid conflicts
    const comments = await github.rest.issues.listComments({
      owner: context.repo.owner,
      repo: context.repo.repo,
      issue_number: context.issue.number,
    });

    // Look for existing PR Visual Analysis comment with multiple patterns
    const existingComment = comments.data.find(comment => {
      const body = comment.body;
      return (
        body.includes('<!-- PR_VISUAL_ANALYSIS_COMMENT -->') ||
        body.includes('## PR Visual Analysis') ||
        body.includes('## ðŸ“Š PR Visual Analysis') ||
        body.includes('Generated by PR Companion Visual Analysis') ||
        body.includes('Generated by PR Companion') ||
        body.includes('GitHub Pages setup in progress')
      );
    });

    if (existingComment) {
      // Update existing comment
      console.log(`Updating existing visual analysis comment (ID: ${existingComment.id})...`);
      try {
        await github.rest.issues.updateComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          comment_id: existingComment.id,
          body: commentBody
        });
        console.log('Successfully updated existing comment');
      } catch (updateError) {
        console.error('Failed to update existing comment:', updateError);
        // If update fails, create a new comment
        const comment = await github.rest.issues.createComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: context.issue.number,
          body: commentBody
        });
        console.log('Created new comment with ID:', comment.data.id);
      }
    } else {
      // Create new comment
      console.log('Creating new visual analysis comment...');
      const comment = await github.rest.issues.createComment({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
        body: commentBody
      });
      console.log('Created new comment with ID:', comment.data.id);
    }

    return {
      success: true,
      message: 'PR visual comment posted successfully with GitHub Pages hosted images',
      urls: visualUrls.urls
    };

  } catch (error) {
    console.error('Error in GitHub Pages visual PR comment:', error);
    
    // Create a fallback comment
    const fallbackBody = `## PR Visual Analysis

**GitHub Pages setup in progress...**

Visual analysis is being generated and deployed to GitHub Pages. 

**Expected URLs:**
- [Visual Dashboard](${visualUrls.urls.index})
- [PR Impact Grid](${visualUrls.urls.development_flow})

**If this is the first PR:**
1. GitHub Pages may need to be enabled in repository settings
2. Go to Settings â†’ Pages â†’ Deploy from gh-pages branch
3. Wait 5-10 minutes for initial deployment

This comment will be updated once visuals are available.

---
*Generated by PR Companion Visual Analysis*
<!-- PR_VISUAL_ANALYSIS_COMMENT -->`;

    try {
      // Try to update existing comment first, or create new one
      const comments = await github.rest.issues.listComments({
        owner: context.repo.owner,
        repo: context.repo.repo,
        issue_number: context.issue.number,
      });

      const existingComment = comments.data.find(comment => {
        const body = comment.body;
        return (
          body.includes('<!-- PR_VISUAL_ANALYSIS_COMMENT -->') ||
          body.includes('## PR Visual Analysis') ||
          body.includes('## ðŸ“Š PR Visual Analysis') ||
          body.includes('Generated by PR Companion Visual Analysis') ||
          body.includes('Generated by PR Companion') ||
          body.includes('GitHub Pages setup in progress')
        );
      });

      if (existingComment) {
        // Update existing comment with fallback
        await github.rest.issues.updateComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          comment_id: existingComment.id,
          body: fallbackBody
        });
        console.log('Updated existing comment with fallback content');
      } else {
        // Create new fallback comment
        await github.rest.issues.createComment({
          owner: context.repo.owner,
          repo: context.repo.repo,
          issue_number: context.issue.number,
          body: fallbackBody
        });
        console.log('Created new fallback comment');
      }
    } catch (fallbackError) {
      console.error('Failed to create/update fallback comment:', fallbackError);
    }

    throw error;
  }
};
