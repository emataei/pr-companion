const fs = require('fs');
const { createOrUpdateComment, getPRNumber } = require('./pr-comment-utils');

async function postEnhancedVisualsComment({ github, context }) {
  const prNumber = getPRNumber(context);
  if (!prNumber) {
    console.log('No PR number found, skipping enhanced visuals comment');
    return;
  }
  
  // Load the enhanced image report with embedded visuals
  let visualsContent = '';
  try {
    visualsContent = fs.readFileSync('.code-analysis/outputs/enhanced_image_report.md', 'utf8');
    
    // Check content size and truncate if necessary
    const maxSize = 60000; // GitHub comment size limit is 65536, leave buffer
    if (visualsContent.length > maxSize) {
      console.log(`⚠️  Report too large (${visualsContent.length} chars), truncating to ${maxSize} chars`);
      
      // Find a good truncation point (end of a section)
      let truncateAt = maxSize;
      const lastSectionEnd = visualsContent.lastIndexOf('\n---\n', maxSize);
      if (lastSectionEnd > maxSize * 0.8) { // Only use if within 80% of limit
        truncateAt = lastSectionEnd + 5; // Include the "---\n\n"
      }
      
      visualsContent = visualsContent.substring(0, truncateAt);
      visualsContent += '\n\n> **Content truncated due to size limits.** Full report available in workflow artifacts.\n\n';
    }
    
    console.log(`✅ Using enhanced image report (${visualsContent.length} characters)`);
  } catch (error) {
    console.log('Could not read enhanced image report:', error.message);
    // Fallback to comprehensive report if available
    try {
      visualsContent = fs.readFileSync('.code-analysis/outputs/comprehensive_pr_report.md', 'utf8');
      console.log('📋 Fallback to comprehensive report');
    } catch (fallbackError) {
      console.log('Could not read any visual reports:', fallbackError.message);
      visualsContent = `## Enhanced PR Visuals

Analysis completed but reports not found. Some visual generation steps may have failed.

Check the [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}) for generated files.`;
    }
  }
  
  // Add workflow reference to visuals
  const workflowReference = `

---

*Generated by [PR Visuals and Documentation workflow](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})*
`;
  
  // Check total content size and truncate if necessary
  const totalContent = visualsContent + workflowReference;
  const maxSize = 64000; // GitHub comment size limit is 65536, leave buffer for JSON encoding
  
  if (totalContent.length > maxSize) {
    console.log(`⚠️  Report too large (${totalContent.length} chars), truncating to fit ${maxSize} chars`);
    
    // Calculate how much space we need to leave for the workflow reference
    const availableSpace = maxSize - workflowReference.length - 100; // Extra buffer
    
    // Find a good truncation point (end of a section)
    let truncateAt = availableSpace;
    const lastSectionEnd = visualsContent.lastIndexOf('\n---\n', availableSpace);
    if (lastSectionEnd > availableSpace * 0.7) { // Use section end if it's not too far back
      truncateAt = lastSectionEnd;
    }
    
    visualsContent = visualsContent.substring(0, truncateAt);
    visualsContent += '\n\n> **⚠️ Content truncated due to GitHub comment size limits.**\n';
    visualsContent += '> Full report available in workflow artifacts.\n\n';
  }
  
  // Add the workflow reference
  visualsContent += workflowReference;
  
  await createOrUpdateComment(
    github, 
    context, 
    prNumber, 
    visualsContent,
    'Enhanced PR Visuals',
    'enhanced-pr-visuals-v2'  // Use unique ID to ensure comment replacement works
  );
}

module.exports = postEnhancedVisualsComment;
