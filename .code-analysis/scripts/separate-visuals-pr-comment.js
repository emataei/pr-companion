const fs = require('fs');
const { createOrUpdateComment, getPRNumber } = require('./pr-comment-utils');

async function postSeparateVisualComments({ github, context }) {
  const prNumber = getPRNumber(context);
  if (!prNumber) {
    console.log('No PR number found, skipping visual comments');
    return;
  }

  const visuals = [
    {
      name: 'PR Impact Grid',
      description: 'Shows risk score, review time estimate, file change heatmap, and development intent',
      baseFile: '.code-analysis/outputs/development_flow_embed.md',
      identifier: 'pr-impact-grid'
    },
    {
      name: 'PR Dependencies',
      description: 'Dependency graph changes between base and PR branches',
      baseFile: '.code-analysis/outputs/dependency_graph_pr_embed.md',
      identifier: 'pr-dependencies'
    }
  ];

  for (const visual of visuals) {
    try {
      let content = '';
      
      // Try to read the embed file with base64 image
      if (fs.existsSync(visual.baseFile)) {
        const embedContent = fs.readFileSync(visual.baseFile, 'utf8');
        
        // Check if content is too large (GitHub limit is ~65KB)
        if (embedContent.length > 60000) {
          console.log(`${visual.name} embed too large (${embedContent.length} chars), using placeholder`);
          content = `## ${visual.name}

${visual.description}

Image not displayed due to size limits. Available in [workflow artifacts](https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}).`;
        } else {
          content = `## ${visual.name}

${visual.description}

${embedContent}`;
        }
      } else {
        // Fallback if embed file doesn't exist
        content = `## ${visual.name}

${visual.description}

Image not generated. Check workflow logs for details.`;
      }

      // Add footer
      content += `

*Generated by PR Visuals workflow*`;

      // Post or update the comment for this specific visual
      await createOrUpdateComment(
        github,
        context,
        prNumber,
        content,
        `pr-visual-${visual.identifier}`
      );

      console.log(`âœ… Posted/updated ${visual.name} comment`);
      
      // Small delay to avoid rate limiting
      await new Promise(resolve => setTimeout(resolve, 500));
      
    } catch (error) {
      console.error(`Failed to post ${visual.name} comment:`, error.message);
    }
  }
}

module.exports = postSeparateVisualComments;
