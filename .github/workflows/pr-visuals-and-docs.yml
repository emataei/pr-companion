name: PR Visuals and Documentation

on:
  push:
    branches:
      - master
      - main
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: write  # Needed for GitHub Pages deployment
  pull-requests: write
  issues: write

jobs:
  generate-pr-visuals-and-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Create output directories
        run: |
          mkdir -p .code-analysis/outputs
          mkdir -p .github/scripts

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
          # Install system dependencies for visualization
          sudo apt-get update
          sudo apt-get install -y graphviz graphviz-dev
          
          # Install global tools
          npm install -g madge
          
          # Install additional Python dependencies for visuals (if not already in requirements.txt)
          pip install matplotlib seaborn pandas pillow numpy
          
          # Install graphviz Python bindings
          pip install graphviz
          
          # Install Git Python for documentation analysis
          pip install GitPython
          
          # Install Azure AI dependencies for smart documentation analysis
          pip install azure-ai-inference azure-identity

      - name: Auto-detect project structure
        id: detect-structure
        run: python .code-analysis/scripts/detect_project_structure.py
        env:
          GITHUB_OUTPUT: ${{ runner.temp }}/github_output

      - name: Install project dependencies
        run: python .code-analysis/scripts/install_project_dependencies.py
        env:
          PROJECT_DIR: ${{ steps.detect-structure.outputs.project_dir }}
          HAS_PACKAGE_JSON: ${{ steps.detect-structure.outputs.has_package_json }}

      - name: Get changed files for analysis
        id: changed-files
        uses: tj-actions/changed-files@v41
        with:
          files: |
            **/*.js
            **/*.ts
            **/*.jsx
            **/*.tsx
            **/*.vue
            **/*.json
            **/*.md
            **/*.yml
            **/*.yaml

      - name: Generate diff stats
        run: |
          git diff --numstat origin/${{ github.base_ref }} > .code-analysis/outputs/diff_stats.txt
          echo "Diff stats generated:"
          head -10 .code-analysis/outputs/diff_stats.txt

      - name: Debug - List available scripts
        run: |
          echo "Listing all scripts in .code-analysis/scripts/"
          ls -la .code-analysis/scripts/

      - name: Generate dependency graphs
        run: python .code-analysis/scripts/generate_dependency_graphs.py
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          PROJECT_DIR: ${{ steps.detect-structure.outputs.project_dir }}
          SOURCE_DIRS: ${{ steps.detect-structure.outputs.source_dirs }}
          PROJECT_TYPE: ${{ steps.detect-structure.outputs.project_type }}

      - name: Generate PR impact heatmap
        run: |
          echo "Generating optimized PR impact heatmap..."
          python .code-analysis/scripts/generate_pr_impact_heatmap.py

      - name: Generate development flow
        run: |
          echo "Checking if development flow script exists..."
          ls -la .code-analysis/scripts/generate_development_flow.py || echo "File not found"
          echo "Running development flow script..."
          python .code-analysis/scripts/generate_development_flow.py

      - name: Generate story arc animation
        run: |
          echo "Checking if story arc script exists..."
          ls -la .code-analysis/scripts/generate_story_arc.py
          echo "Running story arc script..."
          python .code-analysis/scripts/generate_story_arc.py

      - name: Generate animated summary
        run: python .code-analysis/scripts/generate_animated_summary.py
        env:
          PROJECT_DIR: ${{ steps.detect-structure.outputs.project_dir }}
          SOURCE_DIRS: ${{ steps.detect-structure.outputs.source_dirs }}
          PROJECT_TYPE: ${{ steps.detect-structure.outputs.project_type }}

      - name: Generate comprehensive report
        run: python .code-analysis/scripts/generate_comprehensive_report.py
        env:
          PROJECT_DIR: ${{ steps.detect-structure.outputs.project_dir }}
          SOURCE_DIRS: ${{ steps.detect-structure.outputs.source_dirs }}
          PROJECT_TYPE: ${{ steps.detect-structure.outputs.project_type }}

      - name: Generate enhanced visuals report
        run: |
          echo "Generating enhanced visuals report with embedded images..."
          if [ -f ".code-analysis/scripts/generate-embedded-visuals.js" ]; then
            node .code-analysis/scripts/generate-embedded-visuals.js
            
            # Validate report size
            if [ -f ".code-analysis/outputs/enhanced_image_report.md" ]; then
              REPORT_SIZE=$(wc -c < .code-analysis/outputs/enhanced_image_report.md)
              echo "Report size: $REPORT_SIZE characters"
              if [ "$REPORT_SIZE" -gt 60000 ]; then
                echo "⚠️  Warning: Report size ($REPORT_SIZE chars) is near GitHub comment limit (65536 chars)"
              else
                echo "✅ Report size is within safe limits"
              fi
            fi
          else
            echo "Enhanced visuals script not found"
            mkdir -p .code-analysis/outputs
            echo "# Enhanced Visuals Report" > .code-analysis/outputs/enhanced_image_report.md
            echo "Enhanced visuals script was not found in the repository." >> .code-analysis/outputs/enhanced_image_report.md
          fi

      - name: Generate documentation suggestions
        run: |
          echo "Analyzing documentation needs..."
          python .code-analysis/scripts/generate_documentation_suggestions.py || python .code-analysis/scripts/generate_documentation_suggestions_fallback.py
        env:
          GITHUB_BASE_REF: ${{ github.base_ref }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          # Azure AI Foundry configuration (optional - will fallback to rule-based if not set)
          AI_FOUNDRY_ENDPOINT: ${{ secrets.AI_FOUNDRY_ENDPOINT }}
          AI_FOUNDRY_TOKEN: ${{ secrets.AI_FOUNDRY_TOKEN }}
          AI_FOUNDRY_MODEL: ${{ secrets.AI_FOUNDRY_MODEL || 'gpt-4o' }}

      - name: Prepare GitHub Pages deployment
        if: github.event_name == 'pull_request'
        run: |
          echo "Preparing GitHub Pages deployment for PR visuals..."
          
          # Setup GitHub Pages structure
          python .code-analysis/scripts/setup_github_pages.py
          
          # Create the gh-pages directory structure for this PR
          mkdir -p gh-pages/pr/${{ github.event.pull_request.number }}
          
          # Copy all generated PNG and GIF files to gh-pages
          if [ -d ".code-analysis/outputs" ]; then
            echo "Copying visual files to gh-pages..."
            cp .code-analysis/outputs/*.png gh-pages/pr/${{ github.event.pull_request.number }}/ 2>/dev/null || echo "No PNG files found"
            cp .code-analysis/outputs/*.gif gh-pages/pr/${{ github.event.pull_request.number }}/ 2>/dev/null || echo "No GIF files found"
            cp .code-analysis/outputs/*.svg gh-pages/pr/${{ github.event.pull_request.number }}/ 2>/dev/null || echo "No SVG files found"
            
            # List what we're deploying
            echo "Files being deployed to gh-pages:"
            ls -la gh-pages/pr/${{ github.event.pull_request.number }}/
          else
            echo "No outputs directory found"
          fi
          
          # Create an index.html for the PR
          cat > gh-pages/pr/${{ github.event.pull_request.number }}/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>PR #${{ github.event.pull_request.number }} Visuals</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 20px; }
                  .visual { margin: 20px 0; text-align: center; }
                  img { max-width: 100%; height: auto; border: 1px solid #ddd; }
                  h1 { color: #333; }
              </style>
          </head>
          <body>
              <h1>PR #${{ github.event.pull_request.number }} Visual Analysis</h1>
              <div class="visual">
                  <h2>PR Impact Heatmap</h2>
                  <img src="pr_impact_heatmap.png" alt="PR Impact Heatmap" />
              </div>
              <div class="visual">
                  <h2>Development Flow</h2>
                  <img src="development_flow.png" alt="Development Flow" />
              </div>
              <div class="visual">
                  <h2>Story Arc</h2>
                  <img src="story_arc.png" alt="Story Arc" />
              </div>
              <div class="visual">
                  <h2>Dependency Graphs</h2>
                  <img src="dependency_graph_base.png" alt="Base Dependency Graph" />
                  <img src="dependency_graph_pr.png" alt="PR Dependency Graph" />
              </div>
          </body>
          </html>
          EOF

      - name: Debug GitHub Pages setup
        if: github.event_name == 'pull_request'
        run: |
          echo "Repository: ${{ github.repository }}"
          echo "Repository owner: ${{ github.repository_owner }}"
          echo "Repository name: ${{ github.event.repository.name }}"
          echo "PR number: ${{ github.event.pull_request.number }}"
          echo "GitHub Pages URL will be: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          echo "PR visuals URL will be: https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}/pr/${{ github.event.pull_request.number }}/"
          
          # Check if gh-pages directory was created properly
          echo "Contents of gh-pages directory:"
          ls -la gh-pages/ || echo "gh-pages directory not found"
          echo "Contents of PR directory:"
          ls -la gh-pages/pr/${{ github.event.pull_request.number }}/ || echo "PR directory not found"

      - name: Deploy to GitHub Pages
        if: github.event_name == 'pull_request'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./gh-pages
          keep_files: true
          commit_message: "Deploy PR #${{ github.event.pull_request.number }} visuals"
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          enable_jekyll: false

      - name: Cleanup old GitHub Pages content (optional)
        if: github.event_name == 'pull_request'
        continue-on-error: true
        run: |
          echo "Cleanup step - this may fail on first run and that's OK"
          # This step will be enhanced later once GitHub Pages is working
          echo "GitHub Pages deployment successful"

      - name: Create PR visual URLs
        if: github.event_name == 'pull_request'
        id: visual-urls
        run: |
          # Generate the GitHub Pages URLs for the images
          BASE_URL="https://${{ github.repository_owner }}.github.io/${{ github.event.repository.name }}"
          PR_NUM="${{ github.event.pull_request.number }}"
          
          echo "base_url=${BASE_URL}" >> $GITHUB_OUTPUT
          echo "pr_heatmap_url=${BASE_URL}/pr/${PR_NUM}/pr_impact_heatmap.png" >> $GITHUB_OUTPUT
          echo "development_flow_url=${BASE_URL}/pr/${PR_NUM}/development_flow.png" >> $GITHUB_OUTPUT
          echo "story_arc_url=${BASE_URL}/pr/${PR_NUM}/story_arc.png" >> $GITHUB_OUTPUT
          echo "dependency_base_url=${BASE_URL}/pr/${PR_NUM}/dependency_graph_base.png" >> $GITHUB_OUTPUT
          echo "dependency_pr_url=${BASE_URL}/pr/${PR_NUM}/dependency_graph_pr.png" >> $GITHUB_OUTPUT
          echo "pr_index_url=${BASE_URL}/pr/${PR_NUM}/index.html" >> $GITHUB_OUTPUT
          
          # Store URLs in a file for the comment scripts
          mkdir -p .code-analysis/outputs
          cat > .code-analysis/outputs/visual_urls.json << EOF
          {
            "base_url": "${BASE_URL}",
            "pr_number": "${PR_NUM}",
            "urls": {
              "pr_heatmap": "${BASE_URL}/pr/${PR_NUM}/pr_impact_heatmap.png",
              "development_flow": "${BASE_URL}/pr/${PR_NUM}/development_flow.png",
              "story_arc": "${BASE_URL}/pr/${PR_NUM}/story_arc.png",
              "dependency_base": "${BASE_URL}/pr/${PR_NUM}/dependency_graph_base.png",
              "dependency_pr": "${BASE_URL}/pr/${PR_NUM}/dependency_graph_pr.png",
              "index": "${BASE_URL}/pr/${PR_NUM}/index.html"
            }
          }
          EOF
          
          echo "Visual URLs created and saved to visual_urls.json"
          cat .code-analysis/outputs/visual_urls.json

      - name: Upload all visual artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pr-visuals-and-docs
          path: |
            .code-analysis/outputs/dependency_graph_base.png
            .code-analysis/outputs/dependency_graph_pr.png
            .code-analysis/outputs/pr_impact_heatmap.png
            .code-analysis/outputs/development_flow.png
            .code-analysis/outputs/story_arc.png
            .code-analysis/outputs/comprehensive_pr_report.md
            .code-analysis/outputs/enhanced_image_report.md
            .code-analysis/outputs/documentation_suggestions.md
            .code-analysis/outputs/animated_summary.md
            .code-analysis/outputs/diff_stats.txt
            .code-analysis/outputs/enhanced_visuals_results.json
            .code-analysis/outputs/documentation_analysis.json
            .code-analysis/outputs/*.svg
            .code-analysis/outputs/*.json
            .code-analysis/outputs/*.md
            .code-analysis/outputs/*.png
            .code-analysis/outputs/*.gif
          retention-days: 30

      - name: Cleanup old visual comments
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.code-analysis/scripts/cleanup-old-visual-comments.js');
            return await script({ github, context });

      - name: Comment PR with GitHub Pages hosted visuals
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.code-analysis/scripts/github-pages-visual-pr-comment.js');
            return await script({ github, context });

      - name: Comment PR with documentation suggestions
        if: always() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('./.code-analysis/scripts/documentation-suggestions-pr-comment.js');
            return await script({ github, context });
